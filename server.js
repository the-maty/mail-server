require('dotenv').config();
const express = require('express');
const nodemailer = require('nodemailer');
const cors = require('cors');
const rateLimit = require('express-rate-limit');

// Naƒçten√≠ SMTP konfigurace z environment variables
const smtpConfig = {
  host: process.env.SMTP_HOST,
  port: process.env.SMTP_PORT ? parseInt(process.env.SMTP_PORT) : 587,
  secure: process.env.SMTP_SECURE === 'true',
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS
  },
  tls: {
    rejectUnauthorized: process.env.SMTP_REJECT_UNAUTHORIZED !== 'false'
  },
  // Connection pooling pro lep≈°√≠ v√Ωkon
  pool: process.env.SMTP_POOL === 'true',
  maxConnections: process.env.SMTP_MAX_CONNECTIONS ? parseInt(process.env.SMTP_MAX_CONNECTIONS) : 5,
  maxMessages: process.env.SMTP_MAX_MESSAGES ? parseInt(process.env.SMTP_MAX_MESSAGES) : 100,
  rateLimit: process.env.SMTP_RATE_LIMIT ? parseInt(process.env.SMTP_RATE_LIMIT) : 20, // Gmail limit
  rateDelta: process.env.SMTP_RATE_DELTA ? parseInt(process.env.SMTP_RATE_DELTA) : 1000 // 1 sekunda
};

// Kontrola povinn√Ωch SMTP √∫daj≈Ø
if (!smtpConfig.host || !smtpConfig.auth.user || !smtpConfig.auth.pass) {
  console.error('‚ùå Chyb√≠ povinn√© SMTP √∫daje v environment variables!');
  console.error('Pot≈ôebn√©: SMTP_HOST, SMTP_USER, SMTP_PASS');
  process.exit(1);
}

// API Key pro autentifikaci
const API_KEY = process.env.API_KEY;
if (!API_KEY) {
  console.error('‚ùå Chyb√≠ API_KEY v environment variables!');
  process.exit(1);
}

const app = express();
const PORT = process.env.PORT || 3000;
const HOST = process.env.HOST || '0.0.0.0';

// Traffic protection nastaven√≠
const TRAFFIC_PROTECTION = {
  enabled: process.env.TRAFFIC_PROTECTION === 'true',
  maxConcurrentRequests: process.env.MAX_CONCURRENT_REQUESTS ? parseInt(process.env.MAX_CONCURRENT_REQUESTS) : 10,
  requestTimeout: process.env.REQUEST_TIMEOUT ? parseInt(process.env.REQUEST_TIMEOUT) : 30000, // 30s
  retryAttempts: process.env.RETRY_ATTEMPTS ? parseInt(process.env.RETRY_ATTEMPTS) : 3,
  retryDelay: process.env.RETRY_DELAY ? parseInt(process.env.RETRY_DELAY) : 1000, // 1s
  throttleEnabled: process.env.THROTTLE_ENABLED === 'true',
  throttleDelay: process.env.THROTTLE_DELAY ? parseInt(process.env.THROTTLE_DELAY) : 100 // 100ms
};

// Middleware
app.use(cors());
app.use(express.json({ limit: '1mb' })); // Limit velikosti requestu

// SMTP transporter s connection pooling
const transporter = nodemailer.createTransport(smtpConfig);

// Verifikace SMTP p≈ôipojen√≠
transporter.verify((error, success) => {
  if (error) {
    console.error('‚ùå SMTP p≈ôipojen√≠ selhalo:', error);
  } else {
    console.log('‚úÖ SMTP server p≈ôipraven');
  }
});

// Rate Limiting pro 2FA emaily - chyt≈ôe nastaven√Ω pro 5minutov√© ƒçek√°n√≠
const emailLimiter = rateLimit({
  windowMs: 5 * 60 * 1000, // 5 minut (stejnƒõ jako platnost k√≥du)
  max: 5, // max 5 po≈æadavk≈Ø na IP za 5 minut
  message: {
    error: 'P≈ô√≠li≈° mnoho po≈æadavk≈Ø',
    message: 'Zkuste to znovu za 5 minut (platnost k√≥du)',
    retryAfter: 300 // 5 minut v sekund√°ch
  },
  standardHeaders: true,
  legacyHeaders: false,
  // Custom key generator - kombinace IP a emailu pro lep≈°√≠ ochranu
  keyGenerator: (req) => {
    const email = req.body.to || 'unknown';
    return `${req.ip}-${email}`;
  }
});

// Traffic protection middleware
let activeRequests = 0;
const trafficProtection = (req, res, next) => {
  if (!TRAFFIC_PROTECTION.enabled) {
    return next();
  }

  // Kontrola poƒçtu souƒçasn√Ωch po≈æadavk≈Ø
  if (activeRequests >= TRAFFIC_PROTECTION.maxConcurrentRequests) {
    return res.status(429).json({
      error: 'Server je p≈ôet√≠≈æen√Ω',
      message: 'Zkuste to znovu za chv√≠li',
      retryAfter: 5
    });
  }

  activeRequests++;
  
  // Timeout pro po≈æadavek
  const timeout = setTimeout(() => {
    activeRequests--;
    if (!res.headersSent) {
      res.status(408).json({
        error: 'Timeout',
        message: 'Po≈æadavek trval p≈ô√≠li≈° dlouho'
      });
    }
  }, TRAFFIC_PROTECTION.requestTimeout);

  // Cleanup p≈ôi dokonƒçen√≠
  res.on('finish', () => {
    clearTimeout(timeout);
    activeRequests--;
  });

  // Throttling (zpomalen√≠)
  if (TRAFFIC_PROTECTION.throttleEnabled) {
    setTimeout(next, TRAFFIC_PROTECTION.throttleDelay);
  } else {
    next();
  }
};

// Middleware pro kontrolu API Key
const checkApiKey = (req, res, next) => {
  const apiKey = req.headers['x-api-key'];
  
  if (!apiKey) {
    return res.status(401).json({ 
      error: 'Chyb√≠ API kl√≠ƒç',
      message: 'Po≈æadavek mus√≠ obsahovat X-API-Key header'
    });
  }
  
  if (apiKey !== API_KEY) {
    return res.status(401).json({ 
      error: 'Neplatn√Ω API kl√≠ƒç',
      message: 'Zadan√Ω API kl√≠ƒç nen√≠ spr√°vn√Ω'
    });
  }
  
  next();
};

// Retry mechanismus pro SMTP
const sendEmailWithRetry = async (mailOptions, attempts = 0) => {
  try {
    return await transporter.sendMail(mailOptions);
  } catch (error) {
    if (attempts < TRAFFIC_PROTECTION.retryAttempts) {
      console.log(`‚ö†Ô∏è SMTP selhal, opakuji za ${TRAFFIC_PROTECTION.retryDelay}ms (pokus ${attempts + 1}/${TRAFFIC_PROTECTION.retryAttempts})`);
      await new Promise(resolve => setTimeout(resolve, TRAFFIC_PROTECTION.retryDelay));
      return sendEmailWithRetry(mailOptions, attempts + 1);
    }
    throw error;
  }
};

// Email endpoint s zabezpeƒçen√≠m
app.post('/send-email', checkApiKey, emailLimiter, trafficProtection, async (req, res) => {
  try {
    const { to, from, subject, code } = req.body;
    
    if (!to || !subject || !code) {
      return res.status(400).json({ error: 'Chyb√≠ povinn√© parametry' });
    }

    // Nastaven√≠ odes√≠latele s n√°zvem nebo bez
    const fromAddress = from ? `"${from}" <${smtpConfig.auth.user}>` : smtpConfig.auth.user;

    const mailOptions = {
      from: fromAddress,
      to: to,
      subject: subject,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #2563eb;">ReMeds</h2>
          <h3>V√°≈° verifikaƒçn√≠ k√≥d</h3>
          <div style="background-color: #f3f4f6; padding: 20px; border-radius: 8px; text-align: center; margin: 20px 0;">
            <span style="font-size: 32px; font-weight: bold; color: #2563eb; letter-spacing: 4px;">${code}</span>
          </div>
          <p><strong>Tento k√≥d je platn√Ω 5 minut.</strong></p>
          <p>Pokud jste tento k√≥d nevy≈æ√°dali, ignorujte tento email.</p>
          <hr style="margin: 30px 0;">
          <p style="color: #6b7280; font-size: 14px;">
            S pozdravem,<br>
            T√Ωm ReMeds
          </p>
        </div>
      `
    };

    await sendEmailWithRetry(mailOptions);
    
    console.log(`‚úÖ Email odesl√°n na ${to} od ${from || 'syst√©mu'} (IP: ${req.ip})`);
    res.json({ success: true, message: 'Email odesl√°n' });
    
  } catch (error) {
    console.error('‚ùå Chyba p≈ôi odes√≠l√°n√≠ emailu:', error);
    res.status(500).json({ error: 'Chyba p≈ôi odes√≠l√°n√≠ emailu', details: error.message });
  }
});

// Health check (bez API Key pro monitoring)
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    smtp: {
      host: smtpConfig.host,
      port: smtpConfig.port,
      user: smtpConfig.auth.user,
      pool: smtpConfig.pool,
      maxConnections: smtpConfig.maxConnections
    },
    security: {
      rateLimitEnabled: true,
      apiKeyRequired: true,
      trafficProtection: TRAFFIC_PROTECTION.enabled,
      activeRequests: activeRequests,
      maxConcurrentRequests: TRAFFIC_PROTECTION.maxConcurrentRequests
    }
  });
});

app.listen(PORT, HOST, () => {
  console.log(`üöÄ Email server bƒõ≈æ√≠ na ${HOST}:${PORT}`);
  console.log(`üìß SMTP: ${smtpConfig.host}:${smtpConfig.port}`);
  console.log(`üë§ User: ${smtpConfig.auth.user}`);
  console.log(`üîê API Key: ${API_KEY.substring(0, 10)}...`);
  console.log(`üõ°Ô∏è Rate Limit: 5 po≈æadavk≈Ø/5min na IP+email`);
  
  if (TRAFFIC_PROTECTION.enabled) {
    console.log(`üõ°Ô∏è Traffic Protection: POVOLENO`);
    console.log(`   - Max souƒçasn√Ωch po≈æadavk≈Ø: ${TRAFFIC_PROTECTION.maxConcurrentRequests}`);
    console.log(`   - Timeout: ${TRAFFIC_PROTECTION.requestTimeout}ms`);
    console.log(`   - Retry pokus≈Ø: ${TRAFFIC_PROTECTION.retryAttempts}`);
    if (TRAFFIC_PROTECTION.throttleEnabled) {
      console.log(`   - Throttling: ${TRAFFIC_PROTECTION.throttleDelay}ms`);
    }
  } else {
    console.log(`üõ°Ô∏è Traffic Protection: VYPNOUTO`);
  }
  
  if (smtpConfig.pool) {
    console.log(`üîó SMTP Pool: ${smtpConfig.maxConnections} p≈ôipojen√≠`);
  }
}); 